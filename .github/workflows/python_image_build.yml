# Define the name of the GitHub Actions workflow
name: Python Image Build

# This workflow is triggered by a call from another workflow
on:
  workflow_call:
    # Define inputs that can be provided when this workflow is called
    inputs:
      python-version:
        required: true
        type: string
      image-name:
        required: true
        type: string
      image-tag:
        required: false
        type: string
        default: 'latest'
      aws-region:
        required: true
        type: string
      env:
        required: true
        type: string
        description: 'JSON string containing environment variables (docker-username, docker-password, aws-assume-role)'

    # Define secrets that can be used in the workflow
    secrets:
      env-secrets:
        required: true

# Define the jobs and steps the workflow will execute
jobs:
  build-and-push:
    # Specify the type of machine to run the job on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed
    steps:
      - name: Checkout repository
        # Use the GitHub 'checkout' action to check out the current repository code
        uses: actions/checkout@v2

      - name: Set up Python
        # Use the 'setup-python' action to configure the specified Python version
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Parse environment variables
        # Run a custom script to parse the 'env' input and set it as environment variables
        run: |
          echo "Parsing environment variables..."
          env_data=$(echo '${{ secrets.env-secrets }}' | jq -r '.')
          echo "DOCKER_USERNAME=$(echo "$env_data" | jq -r '.docker-username')" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$(echo "$env_data" | jq -r '.docker-password')" >> $GITHUB_ENV
          echo "AWS_ASSUME_ROLE=$(echo "$env_data" | jq -r '.aws-assume-role')" >> $GITHUB_ENV

      - name: Harden Runner
        # Use the 'harden-runner' action to enhance security by auditing outbound traffic
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Configure AWS credentials
        # Use the 'configure-aws-credentials' action to set up AWS credentials by assuming a role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Docker Hub
        # Log in to Docker Hub using the credentials from environment variables
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and push Docker image
        # Use the 'build-push-action' to build and push the Docker image
        uses: docker/build-push-action@v2
        with:
          # Enable pushing the built image
          push: true
          # Set the tag for the Docker image using the workflow input
          tags: ${{ inputs.image-name }}:${{ inputs.image-tag }}
